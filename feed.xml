<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://100kinsat.github.io/</id><title>100kinSAT</title><subtitle>cansat, stem, artificial satellite</subtitle> <updated>2024-03-18T20:38:37+09:00</updated> <author> <name>100kinSAT</name> <uri>https://100kinsat.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://100kinsat.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ja-JP" href="https://100kinsat.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2024 100kinSAT </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>基板の設計ミスと修正に関して</title><link href="https://100kinsat.github.io/posts/fix-circuit-board/" rel="alternate" type="text/html" title="基板の設計ミスと修正に関して" /><published>2021-10-01T00:00:00+09:00</published> <updated>2023-01-26T20:16:14+09:00</updated> <id>https://100kinsat.github.io/posts/fix-circuit-board/</id> <content src="https://100kinsat.github.io/posts/fix-circuit-board/" /> <author> <name>ymt117</name> </author> <category term="その他" /> <summary> はじめに エデュサットの基板にはGPSセンサの回路に関して、設計ミスがあります。 そのため、乾電池によるバッテリー駆動ではGPSセンサが動作しません。 （一方でUSBケーブルでPCと接続しているときは動作します） ここでは設計ミスの内容と基板の修正方法に関して説明します。 ※修正が必要な基板は、基板上のシルクで「100kinSAT_ver3.4」と記載されているものが対象です。 修正対象の基板 GPSセンサの回路設計ミスについて エデュサットに搭載しているGPSセンサは5Vで駆動します。 USBケーブルでPCとESPマイコンを接続しているときは、PCから5Vが供給されているためGPSセンサは動作します。 しかしながら、乾電池から供給する際は約6V（=乾電池4本）の電圧を三端子レギュレータを介して3.3Vにして供給しています。 そのため、GPSセンサに5Vの電圧が供給さ... </summary> </entry> <entry><title>スピーカーを鳴らしてみよう</title><link href="https://100kinsat.github.io/posts/speaker/" rel="alternate" type="text/html" title="スピーカーを鳴らしてみよう" /><published>2021-06-15T00:00:00+09:00</published> <updated>2023-01-26T20:16:14+09:00</updated> <id>https://100kinsat.github.io/posts/speaker/</id> <content src="https://100kinsat.github.io/posts/speaker/" /> <author> <name>ymt117</name> </author> <category term="CanSatをはじめよう" /> <category term="基礎編" /> <summary> この記事で使うソースコード この記事ではスピーカーの制御を行います。 スピーカーはCanSatの起動音に使ったり、エラーのとき鳴らしたりすることができます。 今回はドレミの音階を順番に鳴らすプログラムです。 プログラムが起動するとスピーカーからドレミファソラシドと音が鳴ります。 スピーカー ソースコードの説明 各音階の周波数をマクロで定義しています。 #define mC 261.626 // ド #define mD 293.665 // レ #define mE 329.628 // ミ #define mF 349.228 // ファ #define mG 391.995 // ソ #define mA 440.000 // ラ #define mB 493.883 // シ スピーカーはモータのPWM制御と同じ要領で制御できます。 モータの制御に0... </summary> </entry> <entry><title>スイッチの動作確認をしよう</title><link href="https://100kinsat.github.io/posts/button/" rel="alternate" type="text/html" title="スイッチの動作確認をしよう" /><published>2021-06-07T00:00:00+09:00</published> <updated>2023-01-26T20:16:14+09:00</updated> <id>https://100kinsat.github.io/posts/button/</id> <content src="https://100kinsat.github.io/posts/button/" /> <author> <name>ymt117</name> </author> <category term="CanSatをはじめよう" /> <category term="基礎編" /> <summary> この記事で使うソースコード この記事ではスイッチを使い動作確認を行います。 100kinSATには入力用にタクトスイッチが用意されています。 スイッチを押すとLEDが点灯、離すと消灯するプログラムを作成します。 CanSatは競技開始後、自立走行で目標地点へ走行しなくてはなりません。 そのため競技中はスイッチによる入力機能は必要としませんが、実験段階で各モード（状態遷移）を切り替えたり、ロケットや気球に搭載するタイミングで待機状態をオンにしたりするときに役立ちます。 また、パラシュート放出を検出するためのフライトピンも原理的にはスイッチと同様となっています。 スイッチのオンオフでLEDを制御 ソースコードの説明 スイッチとLEDのピンの変数をグローバル変数として宣言しています。 static const uint8_t button = 35; // スイッチと接... </summary> </entry> <entry><title>ファイルの読み書きをしよう</title><link href="https://100kinsat.github.io/posts/sd-card-sample/" rel="alternate" type="text/html" title="ファイルの読み書きをしよう" /><published>2021-05-20T00:00:00+09:00</published> <updated>2023-01-26T20:16:14+09:00</updated> <id>https://100kinsat.github.io/posts/sd-card-sample/</id> <content src="https://100kinsat.github.io/posts/sd-card-sample/" /> <author> <name>ymt117</name> </author> <category term="CanSatをはじめよう" /> <category term="基礎編" /> <summary> 今回はmicroSDカード（以下SDカードと表記）にテキストファイルを読み書きしてみます。 SDカードにテキストファイルの読み書きができるとCanSatが取得したセンサの値や制御履歴をログとして残すことができます。 SDカードスロット スケッチ例を読み込む まずはSDカードのサンプルスケッチを開きます。 Arduino IDEメニューの「ファイル」&amp;gt;「スケッチ例」&amp;gt;「SD（esp32）」&amp;gt;「SD_Test」にSDカードのサンプルスケッチがあります。 メニューにサンプルスケッチがない場合は、下記リポジトリにライブラリがあるのでここからダウンロードしてきます。 SDカード用ライブラリ SDカード読み書きのサンプルスケッチを開く サンプルスケッチをCanSatに書き込みます。 microSDカードスロットにSDカードを挿入して実行するとコンソール... </summary> </entry> <entry><title>100kinSATの構成（システム設計）について</title><link href="https://100kinsat.github.io/posts/cansat-system-diagram/" rel="alternate" type="text/html" title="100kinSATの構成（システム設計）について" /><published>2021-05-02T00:00:00+09:00</published> <updated>2023-01-26T20:16:14+09:00</updated> <id>https://100kinsat.github.io/posts/cansat-system-diagram/</id> <content src="https://100kinsat.github.io/posts/cansat-system-diagram/" /> <author> <name>ymt117</name> </author> <category term="CanSatをはじめよう" /> <category term="基礎編" /> <summary> ここでは100kinSATのシステム図を示して、100kinSATの構成がどのようになっているか説明します。 100kinSATのシステム図 システム   制御系 ESP32 ミッション系 モータ、電熱線、センサ類 電源系 バッテリー 通信系 Wi-Fi、Bluetooth、マイコンとセンサ間の通信 構造系 基板、タイヤ、パラシュート 制御系 CanSatを目的地まで誘導したり、落下・着地の状態を推定してパラシュートを切り離したりといった動作を実現するシステムが制御系です。 100k... </summary> </entry> </feed>
